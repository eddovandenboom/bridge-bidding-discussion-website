generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  username        String           @unique
  email           String           @unique
  password        String
  role            UserRole         @default(USER)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  biddingTables   BiddingTable[]
  boardLabelVotes BoardLabelVote[]
  comments        Comment[]
  pollVotes       PollVote[]
  polls           Poll[]

  @@map("users")
}

model Tournament {
  id          String   @id @default(cuid())
  name        String
  date        DateTime
  venue       String?
  pbnFileUrl  String?
  source      String   @default("1011.bridge.nl")
  isProcessed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  boards      Board[]

  @@map("tournaments")
}

model Board {
  id            String             @id @default(cuid())
  boardNumber   Int
  dealer        Seat
  vulnerability String
  northHand     String
  southHand     String
  eastHand      String
  westHand      String
  tournamentId  String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  biddingTables BiddingTable[]
  labelStatuses BoardLabelStatus[]
  labelVotes    BoardLabelVote[]
  tournament    Tournament         @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  comments      Comment[]
  playSequences PlaySequence[]
  polls         Poll[]

  @@unique([tournamentId, boardNumber])
  @@map("boards")
}

model BiddingTable {
  id        String    @id @default(cuid())
  boardId   String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bids      Bid[]
  comments  Comment[]
  polls     Poll[]

  @@map("bidding_tables")
}

model Bid {
  id             String       @id @default(cuid())
  biddingTableId String
  position       Int
  seat           Seat
  level          Int?
  suit           String?
  call           String
  isAlert        Boolean      @default(false)
  alertText      String?
  comment        String?
  createdAt      DateTime     @default(now())
  biddingTable   BiddingTable @relation(fields: [biddingTableId], references: [id], onDelete: Cascade)

  @@map("bids")
}

model PlaySequence {
  id        String     @id @default(cuid())
  boardId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  plays     PlayCard[]
  board     Board      @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@map("play_sequences")
}

model PlayCard {
  id             String       @id @default(cuid())
  playSequenceId String
  trick          Int
  position       Int
  seat           Seat
  suit           String
  rank           String
  createdAt      DateTime     @default(now())
  playSequence   PlaySequence @relation(fields: [playSequenceId], references: [id], onDelete: Cascade)

  @@map("play_cards")
}

model Comment {
  id             String        @id @default(cuid())
  content        String
  boardId        String
  userId         String
  parentId       String?
  biddingTableId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  biddingTable   BiddingTable? @relation(fields: [biddingTableId], references: [id])
  board          Board         @relation(fields: [boardId], references: [id], onDelete: Cascade)
  parent         Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies        Comment[]     @relation("CommentReplies")
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Poll {
  id             String        @id @default(cuid())
  title          String
  description    String?
  pollType       PollType
  boardId        String
  userId         String
  biddingTableId String?
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  options        PollOption[]
  votes          PollVote[]
  biddingTable   BiddingTable? @relation(fields: [biddingTableId], references: [id])
  board          Board         @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("polls")
}

model PollOption {
  id          String     @id @default(cuid())
  pollId      String
  text        String
  description String?
  createdAt   DateTime   @default(now())
  poll        Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes       PollVote[]

  @@map("poll_options")
}

model PollVote {
  id           String     @id @default(cuid())
  pollId       String
  pollOptionId String
  userId       String
  createdAt    DateTime   @default(now())
  poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId])
  @@map("poll_votes")
}

model Label {
  id                 String             @id @default(cuid())
  name               String             @unique
  color              String             @default("#3B82F6")
  description        String?
  createdAt          DateTime           @default(now())
  boardLabelStatuses BoardLabelStatus[]
  boardLabelVotes    BoardLabelVote[]

  @@map("labels")
}

model BoardLabelVote {
  id        String   @id @default(cuid())
  boardId   String
  labelId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  label     Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, labelId, userId])
  @@map("board_label_votes")
}

model BoardLabelStatus {
  id         String   @id @default(cuid())
  boardId    String
  labelId    String
  voteCount  Int      @default(0)
  isGlobal   Boolean  @default(false)
  updatedAt  DateTime @updatedAt
  board      Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  label      Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@unique([boardId, labelId])
  @@map("board_label_status")
}

enum UserRole {
  ADMIN
  USER
  GUEST
}

enum Seat {
  NORTH
  SOUTH
  EAST
  WEST
}

enum PollType {
  BIDDING
  PLAY
  GENERAL
}
